#Alyssa Endres

import os, sys, shutil, arcpy
import traceback, time

def log(message):
    arcpy.AddMessage(message)
    with file(sys.argv[0]+".log", 'a') as logFile:
        logFile.write("%s:\t%s\n" % (time.asctime(), message))
    
class Toolbox(object):
    def __init__(self):
        self.label = "WIP tools"
        self.alias = ""
        self.tools = [TopoHydro, ImpCov, Runoff]
        
class TopoHydro(object):
    def __init__(self):
        self.label = "Topography and Hydrology Analysis"
        self.description = "Establishes the watershed and stream network"
        self.canRunInBackground = False
        
        arcpy.env.Workspace = self.Workspace = os.path.split(__file__)[0]
        log("Workspace = " + arcpy.env.Workspace)
        arcpy.env.overwriteOutput = True       

    def getParameterInfo(self):
        """Define parameter definitions"""
        
        param0 = arcpy.Parameter(
            displayName="Input Digital Elevation Model",
            name="DEM",
            datatype="DERasterDataset",
            parameterType="Required",
            direction="Input",
            multiValue=False)  
            
        param1 = arcpy.Parameter(
            displayName="Analysis Mask",
            name="Mask",
            datatype="DEFeatureClass",
            parameterType="Optional",
            direction="Input",
            multiValue=False)  
        
        param2 = arcpy.Parameter(
            displayName="Threshold accumulation for Stream formation (acres)",
            name="StreamFormation",
            datatype="GPDouble",
            parameterType="Required",
            direction="Input",
            multiValue=False)  
        
        params = [ param0, param1, param2 ]
        return params

    def isLicensed(self):
        return True

    def updateParameters(self, parameters):
        return

    def updateMessages(self, parameters):
        return
            
    def execute(self, parameters, messages):
        try:
			log("Parameters are %s, %s, %s" % (parameters[0].valueAsText, parameters[1].valueAsText, parameters[2].valueAsText))
			
			# ---------------------------------------------------------------------------
			# flowaccum_frommodel.py
			# Created on: 2016-03-10 13:40:47.00000
			#   (generated by ArcGIS/ModelBuilder)
			# Description: 
			# ---------------------------------------------------------------------------

			# Import arcpy module
			import arcpy


			# Local variables:
			AnalysisMask = "AnalysisMask"
			AnalysisMask_Raster = "\\\\hd.ad.syr.edu\\01\\c36b5b\\Documents\\GIS_Based_Modeling\\Lab6Redo\\Lab06Data.gdb\\AnalysisMask_Raster"
			DEM = "DEM"
			Fill_DEM = "\\\\hd.ad.syr.edu\\01\\c36b5b\\Documents\\GIS_Based_Modeling\\Lab6Redo\\Lab06Data.gdb\\Fill_DEM"
			Output_drop_raster = ""
			FlowDir_Fill = "\\\\hd.ad.syr.edu\\01\\c36b5b\\Documents\\GIS_Based_Modeling\\Lab6Redo\\Lab06Data.gdb\\FlowDir_Fill"
			FlowAcc_Flow = "\\\\hd.ad.syr.edu\\01\\c36b5b\\Documents\\GIS_Based_Modeling\\Lab6Redo\\Lab06Data.gdb\\FlowAcc_Flow"
			FlowAcc_Flow__2_ = "FlowAcc_Flow"
			cumdrain_acres = "\\\\hd.ad.syr.edu\\01\\c36b5b\\Documents\\GIS_Based_Modeling\\Lab6Redo\\Lab06Data.gdb\\cumdrain_acres"
			cumdrain_acres__2_ = "cumdrain_acres"
			Reclass_cumdrain = "\\\\hd.ad.syr.edu\\01\\c36b5b\\Documents\\GIS_Based_Modeling\\Lab6Redo\\Lab06Data.gdb\\Reclass_cumdrain"
			Reclass_cumdrain__2_ = "Reclass_cumdrain"
			FlowDir_Fill__2_ = "FlowDir_Fill"
			Stream = "\\\\hd.ad.syr.edu\\01\\c36b5b\\Documents\\GIS_Based_Modeling\\Lab6Redo\\Lab06Data.gdb\\Stream"

			# Set Geoprocessing environments
			arcpy.env.snapRaster = "DEM"
			arcpy.env.extent = "2008480.2410905 751026.288687245 2056480.2410905 811226.288687245"
			arcpy.env.cellSize = "40"
			arcpy.env.mask = AnalysisMask_Raster

			# Process: Polygon to Raster
			arcpy.PolygonToRaster_conversion(AnalysisMask, "mask", AnalysisMask_Raster, "CELL_CENTER", "NONE", "40")

			# Process: Fill
			arcpy.gp.Fill_sa(DEM, Fill_DEM, "")

			# Process: Flow Direction
			arcpy.gp.FlowDirection_sa(Fill_DEM, FlowDir_Fill, "NORMAL", Output_drop_raster)

			# Process: Flow Accumulation
			arcpy.gp.FlowAccumulation_sa(FlowDir_Fill, FlowAcc_Flow, "", "FLOAT")

			# Process: Raster Calculator
			arcpy.gp.RasterCalculator_sa("\"%FlowAcc_Flow (2)%\" * 40 * 40 / 43560", cumdrain_acres)

			# Process: Reclassify
			arcpy.gp.Reclassify_sa(cumdrain_acres__2_, "Value", "0 20 NODATA;20.000000100000001 22527 1", Reclass_cumdrain, "DATA")

			# Process: Stream to Feature
			arcpy.gp.StreamToFeature_sa(Reclass_cumdrain__2_, FlowDir_Fill__2_, Stream, "SIMPLIFY")

            
			
        except Exception as err:
            log(traceback.format_exc())
            log(err)
            raise err
        return

class ImpCov(object):
    def __init__(self):
        self.label = "Imperviousness Analysis"
        self.description = "Impervious area contributions"
        self.canRunInBackground = False
        
        arcpy.env.Workspace = self.Workspace = os.path.split(__file__)[0]
        log("Workspace = " + arcpy.env.Workspace)
        arcpy.env.overwriteOutput = True       

    def getParameterInfo(self):
        """Define parameter definitions"""
        
        param0 = arcpy.Parameter(
            displayName="Impervious Areas",
            name="ImperviousAreas",
            datatype="DEFeatureClass",
            parameterType="Required",
            direction="Input",
            multiValue=False)  
            
        param1 = arcpy.Parameter(
            displayName="Lakes",
            name="Lakes",
            datatype="DEFeatureClass",
            parameterType="Optional",
            direction="Input",
            multiValue=False)  
        
        params = [ param0, param1 ]
        return params

    def isLicensed(self):
        return True

    def updateParameters(self, parameters):
        return

    def updateMessages(self, parameters):
        return
            
    def execute(self, parameters, messages):
        try:
            log("Parameters are %s, %s" % (parameters[0].valueAsText, parameters[1].valueAsText))
				
			# ---------------------------------------------------------------------------
			# flowaccum_weighted_frommodel.py
			# Created on: 2016-03-22 16:52:01.00000
			#   (generated by ArcGIS/ModelBuilder)
			# Description: 
			# ---------------------------------------------------------------------------

			# Import arcpy module
			import arcpy


			# Local variables:
			FlowDir_Fill = "FlowDir_Fill"
			Impervious = "Impervious"
			Impervious_Raster = "\\\\hd.ad.syr.edu\\01\\c36b5b\\Documents\\GIS_Based_Modeling\\Lab6Redo\\Lab06Data.gdb\\Impervious_Raster"
			BlockStat_Imperv = "\\\\hd.ad.syr.edu\\01\\c36b5b\\Documents\\GIS_Based_Modeling\\Lab6Redo\\Lab06Data.gdb\\BlockStat_Imperv"
			Aggrega_Blockstat = "\\\\hd.ad.syr.edu\\01\\c36b5b\\Documents\\GIS_Based_Modeling\\Lab6Redo\\Lab06Data.gdb\\Aggrega_Blockstat"
			FlowAcc_Imperv = "\\\\hd.ad.syr.edu\\01\\c36b5b\\Documents\\GIS_Based_Modeling\\Lab6Redo\\Lab06Data.gdb\\FlowAcc_Imperv"
			FlowAcc_Flow = "FlowAcc_Flow"
			percentaccum_imperv_1 = "\\\\hd.ad.syr.edu\\01\\c36b5b\\Documents\\GIS_Based_Modeling\\Lab6Redo\\Lab06Data.gdb\\percentaccum_imperv_1"
			Reclass_percflow = "\\\\hd.ad.syr.edu\\01\\c36b5b\\Documents\\GIS_Based_Modeling\\Lab6Redo\\Lab06Data.gdb\\Reclass_percflow"
			Reclass_percflow__2_ = "Reclass_percflow"
			Reclass_cumdrain = "Reclass_cumdrain"
			reclassperflow_cumdrain = "\\\\hd.ad.syr.edu\\01\\c36b5b\\Documents\\GIS_Based_Modeling\\Lab6Redo\\Lab06Data.gdb\\reclassperflow_cumdrain"
			FlowDir_Fill__2_ = "FlowDir_Fill"
			Stream_weighted = "\\\\hd.ad.syr.edu\\01\\c36b5b\\Documents\\GIS_Based_Modeling\\Lab6Redo\\Lab06Data.gdb\\Stream_weighted"
			IsNull_percacc_imperv = "\\\\hd.ad.syr.edu\\01\\c36b5b\\Documents\\GIS_Based_Modeling\\Lab6Redo\\Lab06Data.gdb\\IsNull_percacc_imperv"
			Input_true_raster_or_constant_value = "0"
			NullTo0_percaccum_imperv = "\\\\hd.ad.syr.edu\\01\\c36b5b\\Documents\\GIS_Based_Modeling\\Lab6Redo\\Lab06Data.gdb\\NullTo0_percaccum_imperv"

			# Set Geoprocessing environments
			arcpy.env.snapRaster = "DEM"
			arcpy.env.extent = "2008480.2410905 751026.288687245 2056480.2410905 811226.288687245"
			arcpy.env.cellSize = "MAXOF"
			arcpy.env.mask = "AnalysisMask_Raster"

			# Process: Polygon to Raster
			arcpy.PolygonToRaster_conversion(Impervious, "LENGTH", Impervious_Raster, "CELL_CENTER", "NONE", "4")

			# Process: Block Statistics
			arcpy.gp.BlockStatistics_sa(Impervious_Raster, BlockStat_Imperv, "Rectangle 10 10 CELL", "SUM", "DATA")

			# Process: Aggregate
			arcpy.gp.Aggregate_sa(BlockStat_Imperv, Aggrega_Blockstat, "10", "MEAN", "EXPAND", "DATA")

			# Process: Flow Accumulation
			arcpy.gp.FlowAccumulation_sa(FlowDir_Fill, FlowAcc_Imperv, Aggrega_Blockstat, "FLOAT")

			# Process: Raster Calculator
			arcpy.gp.RasterCalculator_sa("(\"%FlowAcc_Imperv%\" / \"%FlowAcc_Flow%\") /100", percentaccum_imperv_1)

			# Process: Reclassify
			arcpy.gp.Reclassify_sa(percentaccum_imperv_1, "Value", "0 0.10000000000000001 1;0.10000000000000001 0.20000000000000001 2;0.20000000000000001 0.29999999999999999 3;0.29999999999999999 0.40000000000000002 4;0.40000000000000002 0.5 5;0.5 0.59999999999999998 6;0.59999999999999998 0.69999999999999996 7;0.69999999999999996 0.80000000000000004 8;0.80000000000000004 0.90000000000000002 9;0.90000000000000002 1 10", Reclass_percflow, "DATA")

			# Process: Raster Calculator (2)
			arcpy.gp.RasterCalculator_sa("\"%Reclass_percflow (2)%\" * \"%Reclass_cumdrain%\"", reclassperflow_cumdrain)

			# Process: Stream to Feature
			arcpy.gp.StreamToFeature_sa(reclassperflow_cumdrain, FlowDir_Fill__2_, Stream_weighted, "SIMPLIFY")

			# Process: Is Null
			arcpy.gp.IsNull_sa(percentaccum_imperv_1, IsNull_percacc_imperv)

			# Process: Con
			arcpy.gp.Con_sa(IsNull_percacc_imperv, Input_true_raster_or_constant_value, NullTo0_percaccum_imperv, percentaccum_imperv_1, "\"VALUE\" = 1")



			
        except Exception as err:
            log(traceback.format_exc())
            log(err)
            raise err
        return
        
class Runoff(object):
    def __init__(self):
        self.label = "Runoff Calculations"
        self.description = "Calculation of standard storm flows via USGS regression equations"
        self.canRunInBackground = False
        
        arcpy.env.Workspace = self.Workspace = os.path.split(__file__)[0]
        log("Workspace = " + arcpy.env.Workspace)
        arcpy.env.overwriteOutput = True       

    def getParameterInfo(self):
        """Define parameter definitions"""
        
        param0 = arcpy.Parameter(
            displayName="Curve Number",
            name="Landuse",
            datatype="DEFeatureClass",
            parameterType="Required",
            direction="Input",
            multiValue=False)  
        
        params = [ param0 ]
        return params

    def isLicensed(self):
        return True

    def updateParameters(self, parameters):
        return

    def updateMessages(self, parameters):
        return
            
    def execute(self, parameters, messages):
        try:
            log("Parameter is %s" % (parameters[0].valueAsText))
			
			# ---------------------------------------------------------------------------
			# urbanflowintervals_frommodel.py
			# Created on: 2016-03-21 15:18:17.00000
			#   (generated by ArcGIS/ModelBuilder)
			# Description: 
			# ---------------------------------------------------------------------------

			# Import arcpy module
			import arcpy


			# Local variables:
			cumdrain_acres = "\\\\hd.ad.syr.edu\\01\\c36b5b\\Documents\\GIS_Based_Modeling\\Lab6Redo\\Lab06Data.gdb\\cumdrain_acres"
			cumdrain_sqmi = "\\\\hd.ad.syr.edu\\01\\c36b5b\\Documents\\GIS_Based_Modeling\\Lab6Redo\\Lab06Data.gdb\\cumdrain_sqmi"
			percentaccum_imperv = "percentaccum_imperv"
			floodrec2 = "\\\\hd.ad.syr.edu\\01\\c36b5b\\Documents\\GIS_Based_Modeling\\Lab6Redo\\Lab06Data.gdb\\floodrec2"
			urbanflow2 = "\\\\hd.ad.syr.edu\\01\\c36b5b\\Documents\\GIS_Based_Modeling\\Lab6Redo\\Lab06Data.gdb\\urbanflow2"
			floodrec5 = "\\\\hd.ad.syr.edu\\01\\c36b5b\\Documents\\GIS_Based_Modeling\\Lab6Redo\\Lab06Data.gdb\\floodrec5"
			urbanflow5 = "\\\\hd.ad.syr.edu\\01\\c36b5b\\Documents\\GIS_Based_Modeling\\Lab6Redo\\Lab06Data.gdb\\urbanflow5"
			floodrec10 = "\\\\hd.ad.syr.edu\\01\\c36b5b\\Documents\\GIS_Based_Modeling\\Lab6Redo\\Lab06Data.gdb\\floodrec10"
			urbanflow10 = "\\\\hd.ad.syr.edu\\01\\c36b5b\\Documents\\GIS_Based_Modeling\\Lab6Redo\\Lab06Data.gdb\\urbanflow10"
			floodrec25 = "\\\\hd.ad.syr.edu\\01\\c36b5b\\Documents\\GIS_Based_Modeling\\Lab6Redo\\Lab06Data.gdb\\floodrec25"
			urbanflow25 = "\\\\hd.ad.syr.edu\\01\\c36b5b\\Documents\\GIS_Based_Modeling\\Lab6Redo\\Lab06Data.gdb\\urbanflow25"
			floodrec50 = "\\\\hd.ad.syr.edu\\01\\c36b5b\\Documents\\GIS_Based_Modeling\\Lab6Redo\\Lab06Data.gdb\\floodrec50"
			urbanflow50 = "\\\\hd.ad.syr.edu\\01\\c36b5b\\Documents\\GIS_Based_Modeling\\Lab6Redo\\Lab06Data.gdb\\urbanflow50"
			floodrec100 = "\\\\hd.ad.syr.edu\\01\\c36b5b\\Documents\\GIS_Based_Modeling\\Lab6Redo\\Lab06Data.gdb\\floodrec100"
			urbanflow100 = "\\\\hd.ad.syr.edu\\01\\c36b5b\\Documents\\GIS_Based_Modeling\\Lab6Redo\\Lab06Data.gdb\\urbanflow100"

			# Process: Raster Calculator
			arcpy.gp.RasterCalculator_sa("\"%cumdrain_acres%\" * 0.0015625", cumdrain_sqmi)

			# Process: Raster Calculator (2)
			arcpy.gp.RasterCalculator_sa("144 * (\"%cumdrain_sqmi%\" ^ 0.691)", floodrec2)

			# Process: Raster Calculator (8)
			arcpy.gp.RasterCalculator_sa("28.5 * (\"%cumdrain_sqmi%\" ^ 0.390) * (\"%percentaccum_imperv%\" ^ 0.436) * (\"%floodrec2%\" ^ 0.338)", urbanflow2)

			# Process: Raster Calculator (3)
			arcpy.gp.RasterCalculator_sa("248 * (\"%cumdrain_sqmi%\" ^ 0.670)", floodrec5)

			# Process: Raster Calculator (9)
			arcpy.gp.RasterCalculator_sa("28.5 * (\"%cumdrain_sqmi%\" ^ 0.390) * (\"%percentaccum_imperv%\" ^ 0.436) * (\"%floodrec5%\" ^ 0.338)", urbanflow5)

			# Process: Raster Calculator (4)
			arcpy.gp.RasterCalculator_sa("334 * (\"%cumdrain_sqmi%\" ^ 0.665)", floodrec10)

			# Process: Raster Calculator (10)
			arcpy.gp.RasterCalculator_sa("28.5 * (\"%cumdrain_sqmi%\" ^ 0.390) * (\"%percentaccum_imperv%\" ^ 0.436) * (\"%floodrec10%\" ^ 0.338)", urbanflow10)

			# Process: Raster Calculator (5)
			arcpy.gp.RasterCalculator_sa("467 * (\"%cumdrain_sqmi%\" ^ 0.655)", floodrec25)

			# Process: Raster Calculator (11)
			arcpy.gp.RasterCalculator_sa("28.5 * (\"%cumdrain_sqmi%\" ^ 0.390) * (\"%percentaccum_imperv%\" ^ 0.436) * (\"%floodrec25%\" ^ 0.338)", urbanflow25)

			# Process: Raster Calculator (6)
			arcpy.gp.RasterCalculator_sa("581 * (\"%cumdrain_sqmi%\" ^ 0.650)", floodrec50)

			# Process: Raster Calculator (12)
			arcpy.gp.RasterCalculator_sa("28.5 * (\"%cumdrain_sqmi%\" ^ 0.390) * (\"%percentaccum_imperv%\" ^ 0.436) * (\"%floodrec50%\" ^ 0.338)", urbanflow50)

			# Process: Raster Calculator (7)
			arcpy.gp.RasterCalculator_sa("719 * (\"%cumdrain_sqmi%\" ^ 0.643)", floodrec100)

			# Process: Raster Calculator (13)
			arcpy.gp.RasterCalculator_sa("28.5 * (\"%cumdrain_sqmi%\" ^ 0.390) * (\"%percentaccum_imperv%\" ^ 0.436) * (\"%floodrec100%\" ^ 0.338)", urbanflow100)



        except Exception as err:
            log(traceback.format_exc())
            log(err)
            raise err
        return
		
